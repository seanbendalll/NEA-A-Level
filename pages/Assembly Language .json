{"object": "list", "results": [{"object": "block", "id": "49d161e0-d74b-4cac-8834-a0ea42c7a46b", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "Assembly Language is a low level programming language that is the closest thing to machine code.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Assembly Language is a low level programming language that is the closest thing to machine code.", "href": null}]}}, {"object": "block", "id": "7ac32318-6cc4-46c2-84f1-2d8249cb154e", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "Assembly language utilizes mnemonics and is just above machine code on the programming language spectrum.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Assembly language utilizes mnemonics and is just above machine code on the programming language spectrum.", "href": null}]}}, {"object": "block", "id": "6f57cfe3-ee4e-4bd5-9bd4-71f1d23d560c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "bulleted_list_item", "bulleted_list_item": {"text": [{"type": "text", "text": {"content": "Mnemonics comes in the opcodes", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Mnemonics comes in the opcodes", "href": null}]}}, {"object": "block", "id": "e82fcda4-1863-4aa7-ac15-7185275575f8", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "In the AQA exam, you need to know the ARM language, used in raspberry pi.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "In the AQA exam, you need to know the ARM language, used in raspberry pi.", "href": null}]}}, {"object": "block", "id": "456742cd-0cc0-4d41-b655-55e47cb52f23", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "83df3ef7-2401-470e-8554-ca0931025f41", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "The LMC (called the little man computer) has 9 instructions, that we have already covered. You will need to know what they generally do, but you don't need to memorize them or the mnemonic.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "The LMC (called the little man computer) has 9 instructions, that we have already covered. You will need to know what they generally do, but you don't need to memorize them or the mnemonic.", "href": null}]}}, {"object": "block", "id": "4e3a7834-e85e-47ad-9a40-8dbec8d1c8a8", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "They are all the same as those in CHAPTER 5 active recall questions - specifically chapter 32, yet there is new ones called data location, Output, input.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "They are all the same as those in CHAPTER 5 active recall questions - specifically chapter 32, yet there is new ones called data location, Output, input.", "href": null}]}}, {"object": "block", "id": "4a09fe0a-c298-4835-82f7-82fc4474ac0c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": " ", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": " ", "href": null}]}}, {"object": "block", "id": "e13836bc-d0af-4c30-b1bb-1a1a88f4254c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "divider", "divider": {}}, {"object": "block", "id": "3417804a-b79b-41d0-82a2-be0533f56173", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "INP - Takes an input from the user, in this case a number and puts it into the accumulator\nSTA num1 - stores the value in the accumulator in the address\nINP - takes a seconc input, in this case a second number, and stores it in the accumulator\nADD num1 - adds\nOUT\nnum1 DAT", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "INP - Takes an input from the user, in this case a number and puts it into the accumulator\nSTA num1 - stores the value in the accumulator in the address\nINP - takes a seconc input, in this case a second number, and stores it in the accumulator\nADD num1 - adds\nOUT\nnum1 DAT", "href": null}], "language": "lua"}}, {"object": "block", "id": "7bf5b9c0-9f1a-4545-bb23-c765e298adc3", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "divider", "divider": {}}, {"object": "block", "id": "3801ea36-ed33-4575-accd-5eb13f927afd", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "0 INP //the first input value is loaded into the accumulator.\n1 STA first //the accumulator contents are stored in RAM address 9 (labelled\nfirst).\n2 INP //the second input value is loaded into the accumulator.\n3 ADD first //add the contents of RAM address 9 (labelled first) to the\naccumulator and store the result in the accumulator.\n4 OUT //the value in the accumulator is sent to the OUTPUT.\n5 INP //the third input value is loaded into the accumulator.\n6 SUB first //subtract the contents of RAM address 9 (labelled first) from the\naccumulator and store the result in the accumulator.\n7 OUT //the value in the accumulator is sent to the OUTPUT.\n8 HLT //the program halts.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "0 INP //the first input value is loaded into the accumulator.\n1 STA first //the accumulator contents are stored in RAM address 9 (labelled\nfirst).\n2 INP //the second input value is loaded into the accumulator.\n3 ADD first //add the contents of RAM address 9 (labelled first) to the\naccumulator and store the result in the accumulator.\n4 OUT //the value in the accumulator is sent to the OUTPUT.\n5 INP //the third input value is loaded into the accumulator.\n6 SUB first //subtract the contents of RAM address 9 (labelled first) from the\naccumulator and store the result in the accumulator.\n7 OUT //the value in the accumulator is sent to the OUTPUT.\n8 HLT //the program halts.", "href": null}], "language": "lua"}}, {"object": "block", "id": "411278fb-cc2c-4116-b364-66c06f19ee35", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "divider", "divider": {}}, {"object": "block", "id": "3076cbf1-2db6-48b6-82e3-68e7a2c4b668", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "first is used to label a DAT instruction. DAT identifies the 10th instruction as data. The label therefore refers to RAM address 9 (0-indexed counting).", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "first is used to label a DAT instruction. DAT identifies the 10th instruction as data. The label therefore refers to RAM address 9 (0-indexed counting).", "href": null}]}}, {"object": "block", "id": "30fb1fac-b766-4592-b3bf-bc407eaf7b99", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "dde7dcf2-ac2d-4bcf-8027-4e79f8af115e", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "hashtag shows immediate addressing and direct is with R - to show where to get the data from. ", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "hashtag shows immediate addressing and direct is with R - to show where to get the data from. ", "href": null}]}}, {"object": "block", "id": "a52717ff-75da-4c25-8f6b-a9a19c81d64f", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "ab5c39f4-589f-42c1-8755-35de4878eb63", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": true, "archived": false, "type": "toggle", "toggle": {"text": [{"type": "text", "text": {"content": "What are the the four types of operation codes?", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "What are the the four types of operation codes?", "href": null}]}}, {"object": "block", "id": "f8061516-3e5f-4194-8b1a-10d41ff9d5d1", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "d9431e59-358b-4e0f-bef0-5f3e4aa5fdda", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "In the exam, you have to interpret the assembly language and explain what it does. This can be done as follows", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "In the exam, you have to interpret the assembly language and explain what it does. This can be done as follows", "href": null}]}}, {"object": "block", "id": "48ea5cad-1d81-4abc-a853-8a429ac9dd87", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "image", "image": {"caption": [], "type": "file", "file": {"url": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/58c94783-1fbf-4c45-b1c6-b2270ed8ccfd/Capture34.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20211129%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211129T200733Z&X-Amz-Expires=3600&X-Amz-Signature=8fb66a0db7a5c4f84e88f843fead57fc7f9b778c9573c685b640dde457e8fcc8&X-Amz-SignedHeaders=host&x-id=GetObject", "expiry_time": "2021-11-29T21:07:33.004Z"}}}, {"object": "block", "id": "280a3297-3880-4b65-869c-5470f614781b", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "Instead of IF statements, branch instructions are involved.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Instead of IF statements, branch instructions are involved.", "href": null}]}}, {"object": "block", "id": "a574e65e-248b-40fe-9e4f-a42169d47873", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "8ffbcdfb-9e33-48c6-857a-140fdb127377", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "Program Challenge:", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Program Challenge:", "href": null}]}}, {"object": "block", "id": "a21901bf-0db7-4a54-b6ab-29193a96e6b3", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "bulleted_list_item", "bulleted_list_item": {"text": [{"type": "text", "text": {"content": "Three numbers are stored in locations 301, 302, 303", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Three numbers are stored in locations 301, 302, 303", "href": null}]}}, {"object": "block", "id": "e42a2176-c3fb-43bb-9c9c-39d72caccbe4", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "bulleted_list_item", "bulleted_list_item": {"text": [{"type": "text", "text": {"content": "Store result in location 304 when adding them", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Store result in location 304 when adding them", "href": null}]}}, {"object": "block", "id": "30331240-cf98-4659-bfd9-0e8e73ffdfb2", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "a34040b9-b4d1-43ec-ad35-046cb694c10e", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "LDR R1, 301\nLDR R2, 302\nLDR R3, 303\nADD R4, R1, R2\nADD R5, R4, R3\nSTR R5, 304", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "LDR R1, 301\nLDR R2, 302\nLDR R3, 303\nADD R4, R1, R2\nADD R5, R4, R3\nSTR R5, 304", "href": null}], "language": "javascript"}}, {"object": "block", "id": "de768402-dcd5-418e-9d20-93db7d23c8a3", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "473a9ab6-4735-4c88-9743-84a87b8621e8", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "OR", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "OR", "href": null}]}}, {"object": "block", "id": "e1c40571-00ac-4617-885e-d32bac2973e0", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "LDR R1, 301 \nADD R1, R1, 302 \nADD R1, R1, 303 \nSTR 304, R1", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "LDR R1, 301 \nADD R1, R1, 302 \nADD R1, R1, 303 \nSTR 304, R1", "href": null}], "language": "javascript"}}, {"object": "block", "id": "732c77a5-9b1d-47fd-964a-e6e80ae456fb", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "bd49c569-20f2-44b8-b006-2526f62bf72f", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "CHALLENGES:", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "CHALLENGES:", "href": null}]}}, {"object": "block", "id": "b5cc8e86-cb05-4cbf-8c11-69c5fee34068", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": true, "archived": false, "type": "numbered_list_item", "numbered_list_item": {"text": [{"type": "text", "text": {"content": "A positive number is held in memory location 201. Write assembly code instructions which put the negative of the number in location 202", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "A positive number is held in memory location 201. Write assembly code instructions which put the negative of the number in location 202", "href": null}]}}, {"object": "block", "id": "14d8acc5-3711-4749-8225-4b3ff750d40f", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": true, "archived": false, "type": "numbered_list_item", "numbered_list_item": {"text": [{"type": "text", "text": {"content": "Write assembly code instructions to take three numbers held in locations 201, 202 and 203 and store them bac in he same locations in reverse order", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Write assembly code instructions to take three numbers held in locations 201, 202 and 203 and store them bac in he same locations in reverse order", "href": null}]}}, {"object": "block", "id": "8386d933-c906-44b6-8716-c11d421adcbb", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "heading_2", "heading_2": {"text": [{"type": "text", "text": {"content": "Branching", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Branching", "href": null}]}}, {"object": "block", "id": "9cb3dd11-9708-49fe-88b5-c9557d1a67fc", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "use slides on GC \"Branching[1420]V2.pptx\"", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "use slides on GC \"Branching[1420]V2.pptx\"", "href": null}]}}, {"object": "block", "id": "0f68d0f8-b032-44ec-95ad-d4322a682058", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "c8a4db86-b049-4030-be5b-00502c7f6a07", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "CMP r1, #10 - compares the value in Register 1 to the numerical value 10", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "CMP r1, #10 - compares the value in Register 1 to the numerical value 10", "href": null}]}}, {"object": "block", "id": "8ecf2142-071a-4b2e-958a-89dcd0c7bbf4", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "BNE else - if they arent equal, then move the value 9 to r2.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "BNE else - if they arent equal, then move the value 9 to r2.", "href": null}]}}, {"object": "block", "id": "220fbe79-54c0-439d-88be-b9006d0f9b2c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "MOV r2, #9 ", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "MOV r2, #9 ", "href": null}]}}, {"object": "block", "id": "81bf21b9-c6f2-4474-9cd2-59e91c2bd62c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "B endif", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "B endif", "href": null}]}}, {"object": "block", "id": "79491d50-b23e-4645-a2fa-1790dd398d65", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "else - if they are equal", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "else - if they are equal", "href": null}]}}, {"object": "block", "id": "724497ef-b395-4c84-b64b-a74d2a1ac595", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "ADD r1, r1, #1 - add one to r1 and store it in r1", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "ADD r1, r1, #1 - add one to r1 and store it in r1", "href": null}]}}, {"object": "block", "id": "737d1778-849c-4d92-ba36-9a46fab0ff73", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "endif", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "endif", "href": null}]}}, {"object": "block", "id": "2e8a1ddd-5eed-447e-b5c3-0ed7e2d8d7e4", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "f1901414-d372-41c0-83cc-f3f03f46b1b6", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "0545a32b-c0cf-4457-aa77-3ee542e8bd3c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "Using the Assembly language mnemonics commands guide, write a\nprogram that adds 42 to the number currently stored in memory\nlocation 68 and save the result in memory location 88.", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Using the Assembly language mnemonics commands guide, write a\nprogram that adds 42 to the number currently stored in memory\nlocation 68 and save the result in memory location 88.", "href": null}]}}, {"object": "block", "id": "1d9c9e44-268d-4d79-a93d-cc51b23de5a4", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "ADD 88, 68, #42", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "ADD 88, 68, #42", "href": null}], "language": "javascript"}}, {"object": "block", "id": "779d4f7e-ee51-41f4-a22d-9e9c5c22b5a1", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "f67188b3-acd9-490f-a747-25e14caca405", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "What about this:", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "What about this:", "href": null}]}}, {"object": "block", "id": "a0150e22-7b07-43f4-9393-0b3f56d99f58", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "code", "code": {"text": [{"type": "text", "text": {"content": "MOV\nR0, 0\n\nloop:\n\n\tADD R0, R0, #1 - adds 1 to value in r0 and stores in r0\n\n\tCMP R0, #100 - compares 100 to the value in r0\n\n\tBNE loop - if value in r0 is not 100, then loop is run", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "MOV\nR0, 0\n\nloop:\n\n\tADD R0, R0, #1 - adds 1 to value in r0 and stores in r0\n\n\tCMP R0, #100 - compares 100 to the value in r0\n\n\tBNE loop - if value in r0 is not 100, then loop is run", "href": null}], "language": "javascript"}}, {"object": "block", "id": "903031ac-a4d6-446b-92f9-e60c9f5cab6b", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "45ccb18b-7ac2-4f93-b003-230e80c1231b", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "heading_2", "heading_2": {"text": [{"type": "text", "text": {"content": "Logical Bitwise Operators", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "Logical Bitwise Operators", "href": null}]}}, {"object": "block", "id": "1ac3a4ce-9135-4561-abb0-44781ffc6c6c", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "When applying bit logic to Bit numbers, treat each individually", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "When applying bit logic to Bit numbers, treat each individually", "href": null}]}}, {"object": "block", "id": "c36e4902-0d7d-42a8-8c11-40dd5b19dc11", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": []}}, {"object": "block", "id": "20aabb76-f1f4-423d-8f32-f07a6251c980", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "LDR R1, 200", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "LDR R1, 200", "href": null}]}}, {"object": "block", "id": "bfeddf4d-2541-4c8b-82de-d287ee6df6d1", "created_time": "2021-11-22T21:42:00.000Z", "last_edited_time": "2021-11-22T21:42:00.000Z", "has_children": false, "archived": false, "type": "paragraph", "paragraph": {"text": [{"type": "text", "text": {"content": "OR R2, R1, #00000011B", "link": null}, "annotations": {"bold": false, "italic": false, "strikethrough": false, "underline": false, "code": false, "color": "default"}, "plain_text": "OR R2, R1, #00000011B", "href": null}]}}], "next_cursor": null, "has_more": false}